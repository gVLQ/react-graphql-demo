{"version":3,"sources":["components/Histogram.js","util/convertor.js","App.js","reportWebVitals.js","index.js"],"names":["Histogram","postsDistribution","graphColor","attributes","xMax","yMax","getMonth","p","month","getDistribution","d","postNumber","xScale","useMemo","scaleBand","range","round","domain","map","padding","yScale","scaleLinear","Math","max","width","height","x","y","fill","AxisLeft","left","top","tickFormat","scale","stroke","tickStroke","Group","value","barWidth","bandwidth","barHeight","barX","barY","fontSize","textAnchor","Bar","onClick","AxisBottom","post","string","date","Date","parseInt","createdAt","toLocaleString","charAt","toUpperCase","slice","PRODUCTS","gql","App","response","useQuery","loading","allPosts","data","filter","getFullYear","formattedData","forEach","console","log","convertPosts","length","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60b91d4c.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Group } from \"@visx/group\";\r\nimport { Bar } from \"@visx/shape\";\r\nimport { AxisBottom, AxisLeft } from \"@visx/axis\";\r\nimport { scaleBand, scaleLinear } from \"@visx/scale\";\r\n\r\nfunction Histogram({ postsDistribution }) {\r\n  const graphColor = \"rgba(23, 233, 217, .5)\";\r\n  const attributes = {\r\n    width: 800,\r\n    height: 800,\r\n    rectBackgroundColor: \"#282c34\",\r\n    margin: { top: 10, bottom: 10, left: 10, right: 10 },\r\n  };\r\n\r\n  const xMax = attributes.width;\r\n  const yMax = attributes.height - 120;\r\n\r\n  const getMonth = (p) => p.month;\r\n  const getDistribution = (d) => d.postNumber;\r\n\r\n  const xScale = useMemo(\r\n    () =>\r\n      scaleBand({\r\n        range: [0, xMax],\r\n        round: true,\r\n        domain: postsDistribution.map(getMonth),\r\n        padding: 0.4,\r\n      }),\r\n    [xMax]\r\n  );\r\n  const yScale = useMemo(\r\n    () =>\r\n      scaleLinear({\r\n        range: [yMax, 0],\r\n        round: true,\r\n        domain: [0, Math.max(...postsDistribution.map(getDistribution))],\r\n      }),\r\n    [yMax]\r\n  );\r\n\r\n  return (\r\n    <svg width={attributes.width} height={attributes.height}>\r\n      <rect\r\n        x={0}\r\n        y={0}\r\n        width={attributes.width - 100}\r\n        height={attributes.height - 100}\r\n        fill={attributes.rectBackgroundColor}\r\n      />\r\n      <AxisLeft\r\n        left={10}\r\n        top={10}\r\n        tickFormat={getDistribution}\r\n        scale={yScale}\r\n        stroke={graphColor}\r\n        tickStroke={graphColor}\r\n      />\r\n      <Group top={10}>\r\n        {postsDistribution.map((d) => {\r\n          const events = false;\r\n          const value = getDistribution(d);\r\n          const month = getMonth(d);\r\n          const barWidth = xScale.bandwidth();\r\n          const barHeight = yMax - (yScale(getDistribution(d)) ?? 0);\r\n          const barX = xScale(month);\r\n          const barY = yMax - barHeight;\r\n          return (\r\n            <Group key={`bar-${month}`}>\r\n              <text\r\n                x={barX}\r\n                y={720}\r\n                fontSize={11}\r\n                fill={graphColor}\r\n                textAnchor=\"start\"\r\n              >\r\n                {month}\r\n              </text>\r\n\r\n              <text\r\n                x={value < 10 ? barX + 16 : barX + 13}\r\n                y={barY + 20}\r\n                fontSize={11}\r\n                fill={value > 0 ? \"white\" : attributes.rectBackgroundColor}\r\n                textAnchor=\"start\"\r\n              >\r\n                {value}\r\n              </text>\r\n\r\n              <Bar\r\n                x={barX}\r\n                y={barY}\r\n                width={barWidth}\r\n                height={barHeight}\r\n                fill={graphColor}\r\n                onClick={() => {\r\n                  if (events)\r\n                    alert(`clicked: ${JSON.stringify(Object.values(d))}`);\r\n                }}\r\n              />\r\n            </Group>\r\n          );\r\n        })}\r\n      </Group>\r\n\r\n      <AxisBottom\r\n        left={0}\r\n        top={710}\r\n        tickFormat={getMonth}\r\n        scale={xScale}\r\n        stroke={graphColor}\r\n        tickStroke={graphColor}\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Histogram;\r\n","const capitalizeFirstLetter = function (string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n};\r\n\r\nconst month = function (post) {\r\n  let date = new Date(parseInt(post.createdAt));\r\n  return capitalizeFirstLetter(date.toLocaleString(\"en-EN\", { month: \"long\" }));\r\n};\r\n\r\nexport function convertPosts(data) {\r\n  var formattedData = [\r\n    { postNumber: 0, month: \"January\" },\r\n    { postNumber: 0, month: \"February\" },\r\n    { postNumber: 0, month: \"March\" },\r\n    { postNumber: 0, month: \"April\" },\r\n    { postNumber: 0, month: \"May\" },\r\n    { postNumber: 0, month: \"June\" },\r\n    { postNumber: 0, month: \"July\" },\r\n    { postNumber: 0, month: \"August\" },\r\n    { postNumber: 0, month: \"September\" },\r\n    { postNumber: 0, month: \"October\" },\r\n    { postNumber: 0, month: \"November\" },\r\n    { postNumber: 0, month: \"December\" },\r\n  ];\r\n  data.forEach((post) => {\r\n    switch (month(post)) {\r\n      case \"January\":\r\n        formattedData[0].postNumber++;\r\n        break;\r\n      case \"February\":\r\n        formattedData[1].postNumber++;\r\n        break;\r\n      case \"March\":\r\n        formattedData[2].postNumber++;\r\n        break;\r\n      case \"April\":\r\n        formattedData[3].postNumber++;\r\n        break;\r\n      case \"May\":\r\n        formattedData[4].postNumber++;\r\n        break;\r\n      case \"June\":\r\n        formattedData[5].postNumber++;\r\n        break;\r\n      case \"July\":\r\n        formattedData[6].postNumber++;\r\n        break;\r\n      case \"August\":\r\n        formattedData[7].postNumber++;\r\n        break;\r\n      case \"September\":\r\n        formattedData[8].postNumber++;\r\n        break;\r\n      case \"October\":\r\n        formattedData[9].postNumber++;\r\n        break;\r\n      case \"November\":\r\n        formattedData[10].postNumber++;\r\n        break;\r\n      case \"December\":\r\n        formattedData[11].postNumber++;\r\n        break;\r\n      default:\r\n        console.log(month(post), \" is not a month\");\r\n        return;\r\n    }\r\n  });\r\n  return formattedData;\r\n}\r\n","import \"./App.css\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport Histogram from \"./components/Histogram\";\nimport { convertPosts } from \"./util/convertor\";\n\nconst PRODUCTS = gql`\n  query GetPosts {\n    allPosts(count: 1000) {\n      id\n      title\n      body\n      published\n      createdAt\n    }\n  }\n`;\n\nfunction App() {\n  const response = useQuery(PRODUCTS);\n\n  if (response.loading) return <div>Loading..</div>;\n\n  const allPosts = response.data.allPosts.filter((post) => {\n    let date = new Date(parseInt(post.createdAt));\n    return date.getFullYear() === 2019;\n  });\n\n  const postsDistribution = convertPosts(allPosts);\n\n  if (allPosts.length > 0) {\n    return (\n      <div className=\"App\">\n        <h3> React Graphql VISX demo</h3>\n        <Histogram postsDistribution={postsDistribution} />\n      </div>\n    );\n  } else {\n    return <div>No posts</div>;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://fakerql.stephix.uk/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}